#!/bin/bash

# Set hostname for this machine
echo "{{.Hostname}}" >/etc/hostname
hostname `cat /etc/hostname`

# Append loopback IP for hostname to /etc/hosts
echo "{{printf "%s\t%s" "127.0.1.1" .Hostname}}" >> /etc/hosts

# Append "saltmaster" IP address to /etc/hosts
echo "{{printf "%s\t%s" .SaltMasterIP "saltmaster"}}" >> /etc/hosts

# Write roles to /etc/salt/grains
mkdir -p /etc/salt
echo """
roles:
{{range $role := .Roles}}{{printf " - %s\n" $role}}{{end}}
environment: {{.Environment}}
""" > /etc/salt/grains

# Write configuration for Salt minion
echo """
master: saltmaster
id: {{.Hostname}}

mine_functions:
  network.ip_addrs:
    - eth0
    - eth1
  disk.usage: []
  grains.item:
    - roles
    - ec2_info
    - ec2_local-ipv4
""" > /etc/salt/minion

# Write configuration for Salt master
{{if .IsMaster}}
echo """

file_roots:
  base:
    - /srv/salt/states
  development:
    - /srv/salt/states/env/development
  staging:
    - /srv/salt/states/env/staging
  production:
    - /srv/salt/states/env/production

pillar_roots:
  base:
    - /srv/salt/pillar
  development:
    - /srv/salt/pillar/development
  staging:
    - /srv/salt/pillar/staging
  production:
    - /srv/salt/pillar/production

peer:
  .*:
    - network.ip_addrs
    - grains.*

""" > /etc/salt/master
{{end}}

# Install latest salt stack
{{if .IsMaster}}
curl -L http://bootstrap.saltstack.org | sudo sh -s -- -M stable
{{else}}
curl -L http://bootstrap.saltstack.org | sudo sh -s -- stable
{{end}}

# Stop the salt-minion; once keys are distributed, we'll restart it
stop salt-minion
